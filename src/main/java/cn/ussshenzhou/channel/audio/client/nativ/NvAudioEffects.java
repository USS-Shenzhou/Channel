package cn.ussshenzhou.channel.audio.client.nativ;
// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

/**
 * @author USS_Shenzhou
 * @see <a href="https://docs.nvidia.com/deeplearning/maxine/audio-effects-sdk/index.html">https://docs.nvidia.com/deeplearning/maxine/audio-effects-sdk/index.html</a>
 * @see <a href="https://github.com/NVIDIA-Maxine/Maxine-AFX-SDK">https://github.com/NVIDIA-Maxine/Maxine-AFX-SDK</a>
 */
@SuppressWarnings("preview")
class NvAudioEffects {

    NvAudioEffects() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
        String traceArgs = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
                .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int true_ = (int) 1L;

    /**
     * {@snippet lang = c:
     * #define true 1
     *}
     */
    public static int true_() {
        return true_;
    }

    private static final int false_ = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define false 0
     *}
     */
    public static int false_() {
        return false_;
    }

    private static final int __bool_true_false_are_defined = (int) 1L;

    /**
     * {@snippet lang = c:
     * #define __bool_true_false_are_defined 1
     *}
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }

    private static final int _VCRT_COMPILER_PREPROCESSOR = (int) 1L;

    /**
     * {@snippet lang = c:
     * #define _VCRT_COMPILER_PREPROCESSOR 1
     *}
     */
    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return _VCRT_COMPILER_PREPROCESSOR;
    }

    private static final int _SAL_VERSION = (int) 20L;

    /**
     * {@snippet lang = c:
     * #define _SAL_VERSION 20
     *}
     */
    public static int _SAL_VERSION() {
        return _SAL_VERSION;
    }

    private static final int __SAL_H_VERSION = (int) 180000000L;

    /**
     * {@snippet lang = c:
     * #define __SAL_H_VERSION 180000000
     *}
     */
    public static int __SAL_H_VERSION() {
        return __SAL_H_VERSION;
    }

    private static final int _USE_DECLSPECS_FOR_SAL = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define _USE_DECLSPECS_FOR_SAL 0
     *}
     */
    public static int _USE_DECLSPECS_FOR_SAL() {
        return _USE_DECLSPECS_FOR_SAL;
    }

    private static final int _USE_ATTRIBUTES_FOR_SAL = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define _USE_ATTRIBUTES_FOR_SAL 0
     *}
     */
    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return _USE_ATTRIBUTES_FOR_SAL;
    }

    private static final int _CRT_PACKING = (int) 8L;

    /**
     * {@snippet lang = c:
     * #define _CRT_PACKING 8
     *}
     */
    public static int _CRT_PACKING() {
        return _CRT_PACKING;
    }

    private static final int _HAS_EXCEPTIONS = (int) 1L;

    /**
     * {@snippet lang = c:
     * #define _HAS_EXCEPTIONS 1
     *}
     */
    public static int _HAS_EXCEPTIONS() {
        return _HAS_EXCEPTIONS;
    }

    private static final int _HAS_CXX17 = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define _HAS_CXX17 0
     *}
     */
    public static int _HAS_CXX17() {
        return _HAS_CXX17;
    }

    private static final int _HAS_CXX20 = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define _HAS_CXX20 0
     *}
     */
    public static int _HAS_CXX20() {
        return _HAS_CXX20;
    }

    private static final int _HAS_NODISCARD = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define _HAS_NODISCARD 0
     *}
     */
    public static int _HAS_NODISCARD() {
        return _HAS_NODISCARD;
    }

    private static final int WCHAR_MIN = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define WCHAR_MIN 0
     *}
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }

    private static final int WCHAR_MAX = (int) 65535L;

    /**
     * {@snippet lang = c:
     * #define WCHAR_MAX 65535
     *}
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }

    private static final int WINT_MIN = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define WINT_MIN 0
     *}
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }

    private static final int WINT_MAX = (int) 65535L;

    /**
     * {@snippet lang = c:
     * #define WINT_MAX 65535
     *}
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }

    private static final int NVAFX_TRUE = (int) 1L;

    /**
     * {@snippet lang = c:
     * #define NVAFX_TRUE 1
     *}
     */
    public static int NVAFX_TRUE() {
        return NVAFX_TRUE;
    }

    private static final int NVAFX_FALSE = (int) 0L;

    /**
     * {@snippet lang = c:
     * #define NVAFX_FALSE 0
     *}
     */
    public static int NVAFX_FALSE() {
        return NVAFX_FALSE;
    }

    /**
     * {@snippet lang = c:
     * typedef long long ptrdiff_t
     *}
     */
    public static final OfLong ptrdiff_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long size_t
     *}
     */
    public static final OfLong size_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned short wchar_t
     *}
     */
    public static final OfShort wchar_t = NvAudioEffects.C_SHORT;
    /**
     * {@snippet lang = c:
     * typedef double max_align_t
     *}
     */
    public static final OfDouble max_align_t = NvAudioEffects.C_DOUBLE;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long uintptr_t
     *}
     */
    public static final OfLong uintptr_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef char *va_list
     *}
     */
    public static final AddressLayout va_list = NvAudioEffects.C_POINTER;

    /**
     * Variadic invoker class for:
     * {@snippet lang = c:
     * void __va_start(va_list *, ...)
     *}
     */
    public static class __va_start {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                NvAudioEffects.C_POINTER
        );
        private static final MemorySegment ADDR = NvAudioEffects.findOrThrow("__va_start");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __va_start(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang = c:
         * void __va_start(va_list *, ...)
         *}
         */
        public static __va_start makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __va_start(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__va_start", x0, x1);
                }
                spreader.invokeExact(x0, x1);
            } catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * {@snippet lang = c:
     * typedef long long intptr_t
     *}
     */
    public static final OfLong intptr_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef _Bool __vcrt_bool
     *}
     */
    public static final OfBoolean __vcrt_bool = NvAudioEffects.C_BOOL;

    private static class __security_init_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid();

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("__security_init_cookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * void __security_init_cookie()
     *}
     */
    public static FunctionDescriptor __security_init_cookie$descriptor() {
        return __security_init_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * void __security_init_cookie()
     *}
     */
    public static MethodHandle __security_init_cookie$handle() {
        return __security_init_cookie.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * void __security_init_cookie()
     *}
     */
    public static MemorySegment __security_init_cookie$address() {
        return __security_init_cookie.ADDR;
    }

    /**
     * {@snippet lang = c:
     * void __security_init_cookie()
     *}
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_init_cookie");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_check_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                NvAudioEffects.C_LONG_LONG
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("__security_check_cookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * void __security_check_cookie(uintptr_t _StackCookie)
     *}
     */
    public static FunctionDescriptor __security_check_cookie$descriptor() {
        return __security_check_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * void __security_check_cookie(uintptr_t _StackCookie)
     *}
     */
    public static MethodHandle __security_check_cookie$handle() {
        return __security_check_cookie.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * void __security_check_cookie(uintptr_t _StackCookie)
     *}
     */
    public static MemorySegment __security_check_cookie$address() {
        return __security_check_cookie.ADDR;
    }

    /**
     * {@snippet lang = c:
     * void __security_check_cookie(uintptr_t _StackCookie)
     *}
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_check_cookie", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __report_gsfailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
                NvAudioEffects.C_LONG_LONG
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("__report_gsfailure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * void __report_gsfailure(uintptr_t _StackCookie)
     *}
     */
    public static FunctionDescriptor __report_gsfailure$descriptor() {
        return __report_gsfailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * void __report_gsfailure(uintptr_t _StackCookie)
     *}
     */
    public static MethodHandle __report_gsfailure$handle() {
        return __report_gsfailure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * void __report_gsfailure(uintptr_t _StackCookie)
     *}
     */
    public static MemorySegment __report_gsfailure$address() {
        return __report_gsfailure.ADDR;
    }

    /**
     * {@snippet lang = c:
     * void __report_gsfailure(uintptr_t _StackCookie)
     *}
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__report_gsfailure", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_cookie$constants {
        public static final OfLong LAYOUT = NvAudioEffects.C_LONG_LONG;
        public static final MemorySegment SEGMENT = NvAudioEffects.findOrThrow("__security_cookie").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang = c:
     * extern uintptr_t __security_cookie
     *}
     */
    public static OfLong __security_cookie$layout() {
        return __security_cookie$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang = c:
     * extern uintptr_t __security_cookie
     *}
     */
    public static MemorySegment __security_cookie$segment() {
        return __security_cookie$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang = c:
     * extern uintptr_t __security_cookie
     *}
     */
    public static long __security_cookie() {
        return __security_cookie$constants.SEGMENT.get(__security_cookie$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang = c:
     * extern uintptr_t __security_cookie
     *}
     */
    public static void __security_cookie(long varValue) {
        __security_cookie$constants.SEGMENT.set(__security_cookie$constants.LAYOUT, 0L, varValue);
    }

    /**
     * {@snippet lang = c:
     * typedef signed char int8_t
     *}
     */
    public static final OfByte int8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef short int16_t
     *}
     */
    public static final OfShort int16_t = NvAudioEffects.C_SHORT;
    /**
     * {@snippet lang = c:
     * typedef int int32_t
     *}
     */
    public static final OfInt int32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef long long int64_t
     *}
     */
    public static final OfLong int64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned char uint8_t
     *}
     */
    public static final OfByte uint8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef unsigned short uint16_t
     *}
     */
    public static final OfShort uint16_t = NvAudioEffects.C_SHORT;
    /**
     * {@snippet lang = c:
     * typedef unsigned int uint32_t
     *}
     */
    public static final OfInt uint32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long uint64_t
     *}
     */
    public static final OfLong uint64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef signed char int_least8_t
     *}
     */
    public static final OfByte int_least8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef short int_least16_t
     *}
     */
    public static final OfShort int_least16_t = NvAudioEffects.C_SHORT;
    /**
     * {@snippet lang = c:
     * typedef int int_least32_t
     *}
     */
    public static final OfInt int_least32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef long long int_least64_t
     *}
     */
    public static final OfLong int_least64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned char uint_least8_t
     *}
     */
    public static final OfByte uint_least8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef unsigned short uint_least16_t
     *}
     */
    public static final OfShort uint_least16_t = NvAudioEffects.C_SHORT;
    /**
     * {@snippet lang = c:
     * typedef unsigned int uint_least32_t
     *}
     */
    public static final OfInt uint_least32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long uint_least64_t
     *}
     */
    public static final OfLong uint_least64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef signed char int_fast8_t
     *}
     */
    public static final OfByte int_fast8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef int int_fast16_t
     *}
     */
    public static final OfInt int_fast16_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef int int_fast32_t
     *}
     */
    public static final OfInt int_fast32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef long long int_fast64_t
     *}
     */
    public static final OfLong int_fast64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned char uint_fast8_t
     *}
     */
    public static final OfByte uint_fast8_t = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef unsigned int uint_fast16_t
     *}
     */
    public static final OfInt uint_fast16_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef unsigned int uint_fast32_t
     *}
     */
    public static final OfInt uint_fast32_t = NvAudioEffects.C_INT;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long uint_fast64_t
     *}
     */
    public static final OfLong uint_fast64_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef long long intmax_t
     *}
     */
    public static final OfLong intmax_t = NvAudioEffects.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef unsigned long long uintmax_t
     *}
     */
    public static final OfLong uintmax_t = NvAudioEffects.C_LONG_LONG;

    /**
     * {@snippet lang = c:
     * typedef char NvAFX_Bool
     *}
     */
    public static final OfByte NvAFX_Bool = NvAudioEffects.C_CHAR;
    /**
     * {@snippet lang = c:
     * typedef const char *NvAFX_EffectSelector
     *}
     */
    public static final AddressLayout NvAFX_EffectSelector = NvAudioEffects.C_POINTER;
    /**
     * {@snippet lang = c:
     * typedef const char *NvAFX_ParameterSelector
     *}
     */
    public static final AddressLayout NvAFX_ParameterSelector = NvAudioEffects.C_POINTER;
    /**
     * {@snippet lang = c:
     * typedef void *NvAFX_Handle
     *}
     */
    public static final AddressLayout NvAFX_Handle = NvAudioEffects.C_POINTER;

    private static class NvAFX_GetEffectList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetEffectList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetEffectList(int *num_effects, NvAFX_EffectSelector *effects[])
     *}
     */
    public static FunctionDescriptor NvAFX_GetEffectList$descriptor() {
        return NvAFX_GetEffectList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetEffectList(int *num_effects, NvAFX_EffectSelector *effects[])
     *}
     */
    public static MethodHandle NvAFX_GetEffectList$handle() {
        return NvAFX_GetEffectList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetEffectList(int *num_effects, NvAFX_EffectSelector *effects[])
     *}
     */
    public static MemorySegment NvAFX_GetEffectList$address() {
        return NvAFX_GetEffectList.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetEffectList(int *num_effects, NvAFX_EffectSelector *effects[])
     *}
     */
    public static int NvAFX_GetEffectList(MemorySegment num_effects, MemorySegment effects) {
        var mh$ = NvAFX_GetEffectList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetEffectList", num_effects, effects);
            }
            return (int) mh$.invokeExact(num_effects, effects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_CreateEffect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_CreateEffect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static FunctionDescriptor NvAFX_CreateEffect$descriptor() {
        return NvAFX_CreateEffect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static MethodHandle NvAFX_CreateEffect$handle() {
        return NvAFX_CreateEffect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static MemorySegment NvAFX_CreateEffect$address() {
        return NvAFX_CreateEffect.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static int NvAFX_CreateEffect(MemorySegment code, MemorySegment effect) {
        var mh$ = NvAFX_CreateEffect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_CreateEffect", code, effect);
            }
            return (int) mh$.invokeExact(code, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_CreateChainedEffect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_CreateChainedEffect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateChainedEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static FunctionDescriptor NvAFX_CreateChainedEffect$descriptor() {
        return NvAFX_CreateChainedEffect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateChainedEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static MethodHandle NvAFX_CreateChainedEffect$handle() {
        return NvAFX_CreateChainedEffect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateChainedEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static MemorySegment NvAFX_CreateChainedEffect$address() {
        return NvAFX_CreateChainedEffect.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_CreateChainedEffect(NvAFX_EffectSelector code, NvAFX_Handle *effect)
     *}
     */
    public static int NvAFX_CreateChainedEffect(MemorySegment code, MemorySegment effect) {
        var mh$ = NvAFX_CreateChainedEffect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_CreateChainedEffect", code, effect);
            }
            return (int) mh$.invokeExact(code, effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_DestroyEffect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_DestroyEffect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_DestroyEffect(NvAFX_Handle effect)
     *}
     */
    public static FunctionDescriptor NvAFX_DestroyEffect$descriptor() {
        return NvAFX_DestroyEffect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_DestroyEffect(NvAFX_Handle effect)
     *}
     */
    public static MethodHandle NvAFX_DestroyEffect$handle() {
        return NvAFX_DestroyEffect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_DestroyEffect(NvAFX_Handle effect)
     *}
     */
    public static MemorySegment NvAFX_DestroyEffect$address() {
        return NvAFX_DestroyEffect.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_DestroyEffect(NvAFX_Handle effect)
     *}
     */
    public static int NvAFX_DestroyEffect(MemorySegment effect) {
        var mh$ = NvAFX_DestroyEffect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_DestroyEffect", effect);
            }
            return (int) mh$.invokeExact(effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetU32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetU32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int val)
     *}
     */
    public static FunctionDescriptor NvAFX_SetU32$descriptor() {
        return NvAFX_SetU32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int val)
     *}
     */
    public static MethodHandle NvAFX_SetU32$handle() {
        return NvAFX_SetU32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int val)
     *}
     */
    public static MemorySegment NvAFX_SetU32$address() {
        return NvAFX_SetU32.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int val)
     *}
     */
    public static int NvAFX_SetU32(MemorySegment effect, MemorySegment param_name, int val) {
        var mh$ = NvAFX_SetU32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetU32", effect, param_name, val);
            }
            return (int) mh$.invokeExact(effect, param_name, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetU32List {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetU32List");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32List(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val, unsigned int size)
     *}
     */
    public static FunctionDescriptor NvAFX_SetU32List$descriptor() {
        return NvAFX_SetU32List.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32List(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val, unsigned int size)
     *}
     */
    public static MethodHandle NvAFX_SetU32List$handle() {
        return NvAFX_SetU32List.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32List(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val, unsigned int size)
     *}
     */
    public static MemorySegment NvAFX_SetU32List$address() {
        return NvAFX_SetU32List.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetU32List(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val, unsigned int size)
     *}
     */
    public static int NvAFX_SetU32List(MemorySegment effect, MemorySegment param_name, MemorySegment val, int size) {
        var mh$ = NvAFX_SetU32List.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetU32List", effect, param_name, val, size);
            }
            return (int) mh$.invokeExact(effect, param_name, val, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char *val)
     *}
     */
    public static FunctionDescriptor NvAFX_SetString$descriptor() {
        return NvAFX_SetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char *val)
     *}
     */
    public static MethodHandle NvAFX_SetString$handle() {
        return NvAFX_SetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char *val)
     *}
     */
    public static MemorySegment NvAFX_SetString$address() {
        return NvAFX_SetString.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char *val)
     *}
     */
    public static int NvAFX_SetString(MemorySegment effect, MemorySegment param_name, MemorySegment val) {
        var mh$ = NvAFX_SetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetString", effect, param_name, val);
            }
            return (int) mh$.invokeExact(effect, param_name, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetStringList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char **val, unsigned int size)
     *}
     */
    public static FunctionDescriptor NvAFX_SetStringList$descriptor() {
        return NvAFX_SetStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char **val, unsigned int size)
     *}
     */
    public static MethodHandle NvAFX_SetStringList$handle() {
        return NvAFX_SetStringList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char **val, unsigned int size)
     *}
     */
    public static MemorySegment NvAFX_SetStringList$address() {
        return NvAFX_SetStringList.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, const char **val, unsigned int size)
     *}
     */
    public static int NvAFX_SetStringList(MemorySegment effect, MemorySegment param_name, MemorySegment val, int size) {
        var mh$ = NvAFX_SetStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetStringList", effect, param_name, val, size);
            }
            return (int) mh$.invokeExact(effect, param_name, val, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_FLOAT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float val)
     *}
     */
    public static FunctionDescriptor NvAFX_SetFloat$descriptor() {
        return NvAFX_SetFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float val)
     *}
     */
    public static MethodHandle NvAFX_SetFloat$handle() {
        return NvAFX_SetFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float val)
     *}
     */
    public static MemorySegment NvAFX_SetFloat$address() {
        return NvAFX_SetFloat.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float val)
     *}
     */
    public static int NvAFX_SetFloat(MemorySegment effect, MemorySegment param_name, float val) {
        var mh$ = NvAFX_SetFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetFloat", effect, param_name, val);
            }
            return (int) mh$.invokeExact(effect, param_name, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_SetFloatList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_SetFloatList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static FunctionDescriptor NvAFX_SetFloatList$descriptor() {
        return NvAFX_SetFloatList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static MethodHandle NvAFX_SetFloatList$handle() {
        return NvAFX_SetFloatList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static MemorySegment NvAFX_SetFloatList$address() {
        return NvAFX_SetFloatList.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_SetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static int NvAFX_SetFloatList(MemorySegment effect, MemorySegment param_name, MemorySegment val, int size) {
        var mh$ = NvAFX_SetFloatList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_SetFloatList", effect, param_name, val, size);
            }
            return (int) mh$.invokeExact(effect, param_name, val, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetU32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetU32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val)
     *}
     */
    public static FunctionDescriptor NvAFX_GetU32$descriptor() {
        return NvAFX_GetU32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val)
     *}
     */
    public static MethodHandle NvAFX_GetU32$handle() {
        return NvAFX_GetU32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val)
     *}
     */
    public static MemorySegment NvAFX_GetU32$address() {
        return NvAFX_GetU32.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetU32(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, unsigned int *val)
     *}
     */
    public static int NvAFX_GetU32(MemorySegment effect, MemorySegment param_name, MemorySegment val) {
        var mh$ = NvAFX_GetU32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetU32", effect, param_name, val);
            }
            return (int) mh$.invokeExact(effect, param_name, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char *val, int max_length)
     *}
     */
    public static FunctionDescriptor NvAFX_GetString$descriptor() {
        return NvAFX_GetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char *val, int max_length)
     *}
     */
    public static MethodHandle NvAFX_GetString$handle() {
        return NvAFX_GetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char *val, int max_length)
     *}
     */
    public static MemorySegment NvAFX_GetString$address() {
        return NvAFX_GetString.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetString(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char *val, int max_length)
     *}
     */
    public static int NvAFX_GetString(MemorySegment effect, MemorySegment param_name, MemorySegment val, int max_length) {
        var mh$ = NvAFX_GetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetString", effect, param_name, val, max_length);
            }
            return (int) mh$.invokeExact(effect, param_name, val, max_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetStringList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char **val, int *max_length, unsigned int size)
     *}
     */
    public static FunctionDescriptor NvAFX_GetStringList$descriptor() {
        return NvAFX_GetStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char **val, int *max_length, unsigned int size)
     *}
     */
    public static MethodHandle NvAFX_GetStringList$handle() {
        return NvAFX_GetStringList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char **val, int *max_length, unsigned int size)
     *}
     */
    public static MemorySegment NvAFX_GetStringList$address() {
        return NvAFX_GetStringList.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetStringList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, char **val, int *max_length, unsigned int size)
     *}
     */
    public static int NvAFX_GetStringList(MemorySegment effect, MemorySegment param_name, MemorySegment val, MemorySegment max_length, int size) {
        var mh$ = NvAFX_GetStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetStringList", effect, param_name, val, max_length, size);
            }
            return (int) mh$.invokeExact(effect, param_name, val, max_length, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val)
     *}
     */
    public static FunctionDescriptor NvAFX_GetFloat$descriptor() {
        return NvAFX_GetFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val)
     *}
     */
    public static MethodHandle NvAFX_GetFloat$handle() {
        return NvAFX_GetFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val)
     *}
     */
    public static MemorySegment NvAFX_GetFloat$address() {
        return NvAFX_GetFloat.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloat(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val)
     *}
     */
    public static int NvAFX_GetFloat(MemorySegment effect, MemorySegment param_name, MemorySegment val) {
        var mh$ = NvAFX_GetFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetFloat", effect, param_name, val);
            }
            return (int) mh$.invokeExact(effect, param_name, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetFloatList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetFloatList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static FunctionDescriptor NvAFX_GetFloatList$descriptor() {
        return NvAFX_GetFloatList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static MethodHandle NvAFX_GetFloatList$handle() {
        return NvAFX_GetFloatList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static MemorySegment NvAFX_GetFloatList$address() {
        return NvAFX_GetFloatList.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetFloatList(NvAFX_Handle effect, NvAFX_ParameterSelector param_name, float *val, unsigned int size)
     *}
     */
    public static int NvAFX_GetFloatList(MemorySegment effect, MemorySegment param_name, MemorySegment val, int size) {
        var mh$ = NvAFX_GetFloatList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetFloatList", effect, param_name, val, size);
            }
            return (int) mh$.invokeExact(effect, param_name, val, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_Load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_Load");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Load(NvAFX_Handle effect)
     *}
     */
    public static FunctionDescriptor NvAFX_Load$descriptor() {
        return NvAFX_Load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Load(NvAFX_Handle effect)
     *}
     */
    public static MethodHandle NvAFX_Load$handle() {
        return NvAFX_Load.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Load(NvAFX_Handle effect)
     *}
     */
    public static MemorySegment NvAFX_Load$address() {
        return NvAFX_Load.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Load(NvAFX_Handle effect)
     *}
     */
    public static int NvAFX_Load(MemorySegment effect) {
        var mh$ = NvAFX_Load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_Load", effect);
            }
            return (int) mh$.invokeExact(effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_GetSupportedDevices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_GetSupportedDevices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetSupportedDevices(NvAFX_Handle effect, int *num, int *devices)
     *}
     */
    public static FunctionDescriptor NvAFX_GetSupportedDevices$descriptor() {
        return NvAFX_GetSupportedDevices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetSupportedDevices(NvAFX_Handle effect, int *num, int *devices)
     *}
     */
    public static MethodHandle NvAFX_GetSupportedDevices$handle() {
        return NvAFX_GetSupportedDevices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetSupportedDevices(NvAFX_Handle effect, int *num, int *devices)
     *}
     */
    public static MemorySegment NvAFX_GetSupportedDevices$address() {
        return NvAFX_GetSupportedDevices.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_GetSupportedDevices(NvAFX_Handle effect, int *num, int *devices)
     *}
     */
    public static int NvAFX_GetSupportedDevices(MemorySegment effect, MemorySegment num, MemorySegment devices) {
        var mh$ = NvAFX_GetSupportedDevices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_GetSupportedDevices", effect, num, devices);
            }
            return (int) mh$.invokeExact(effect, num, devices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_Run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_POINTER,
                NvAudioEffects.C_INT,
                NvAudioEffects.C_INT
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_Run");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Run(NvAFX_Handle effect, const float **input, float **output, unsigned int num_input_samples, unsigned int num_input_channels)
     *}
     */
    public static FunctionDescriptor NvAFX_Run$descriptor() {
        return NvAFX_Run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Run(NvAFX_Handle effect, const float **input, float **output, unsigned int num_input_samples, unsigned int num_input_channels)
     *}
     */
    public static MethodHandle NvAFX_Run$handle() {
        return NvAFX_Run.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Run(NvAFX_Handle effect, const float **input, float **output, unsigned int num_input_samples, unsigned int num_input_channels)
     *}
     */
    public static MemorySegment NvAFX_Run$address() {
        return NvAFX_Run.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Run(NvAFX_Handle effect, const float **input, float **output, unsigned int num_input_samples, unsigned int num_input_channels)
     *}
     */
    public static int NvAFX_Run(MemorySegment effect, MemorySegment input, MemorySegment output, int num_input_samples, int num_input_channels) {
        var mh$ = NvAFX_Run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_Run", effect, input, output, num_input_samples, num_input_channels);
            }
            return (int) mh$.invokeExact(effect, input, output, num_input_samples, num_input_channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NvAFX_Reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                NvAudioEffects.C_INT,
                NvAudioEffects.C_POINTER
        );

        public static final MemorySegment ADDR = NvAudioEffects.findOrThrow("NvAFX_Reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Reset(NvAFX_Handle effect)
     *}
     */
    public static FunctionDescriptor NvAFX_Reset$descriptor() {
        return NvAFX_Reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Reset(NvAFX_Handle effect)
     *}
     */
    public static MethodHandle NvAFX_Reset$handle() {
        return NvAFX_Reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Reset(NvAFX_Handle effect)
     *}
     */
    public static MemorySegment NvAFX_Reset$address() {
        return NvAFX_Reset.ADDR;
    }

    /**
     * {@snippet lang = c:
     * NvAFX_Status NvAFX_Reset(NvAFX_Handle effect)
     *}
     */
    public static int NvAFX_Reset(MemorySegment effect) {
        var mh$ = NvAFX_Reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NvAFX_Reset", effect);
            }
            return (int) mh$.invokeExact(effect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);

    /**
     * {@snippet lang = c:
     * #define NULL (void*) 0
     *}
     */
    public static MemorySegment NULL() {
        return NULL;
    }

    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int) 4514L;

    /**
     * {@snippet lang = c:
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     *}
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }

    private static final int INT8_MIN = (int) -128L;

    /**
     * {@snippet lang = c:
     * #define INT8_MIN -128
     *}
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }

    private static final int INT16_MIN = (int) -32768L;

    /**
     * {@snippet lang = c:
     * #define INT16_MIN -32768
     *}
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }

    private static final int INT32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c:
     * #define INT32_MIN -2147483648
     *}
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }

    private static final long INT64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define INT64_MIN -9223372036854775808
     *}
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }

    private static final byte INT8_MAX = (byte) 127L;

    /**
     * {@snippet lang = c:
     * #define INT8_MAX 127
     *}
     */
    public static byte INT8_MAX() {
        return INT8_MAX;
    }

    private static final short INT16_MAX = (short) 32767L;

    /**
     * {@snippet lang = c:
     * #define INT16_MAX 32767
     *}
     */
    public static short INT16_MAX() {
        return INT16_MAX;
    }

    private static final int INT32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c:
     * #define INT32_MAX 2147483647
     *}
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }

    private static final long INT64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define INT64_MAX 9223372036854775807
     *}
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }

    private static final byte UINT8_MAX = (byte) 255L;

    /**
     * {@snippet lang = c:
     * #define UINT8_MAX 255
     *}
     */
    public static byte UINT8_MAX() {
        return UINT8_MAX;
    }

    private static final short UINT16_MAX = (short) 65535L;

    /**
     * {@snippet lang = c:
     * #define UINT16_MAX 65535
     *}
     */
    public static short UINT16_MAX() {
        return UINT16_MAX;
    }

    private static final int UINT32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c:
     * #define UINT32_MAX 4294967295
     *}
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }

    private static final long UINT64_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define UINT64_MAX -1
     *}
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }

    private static final int INT_LEAST8_MIN = (int) -128L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST8_MIN -128
     *}
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }

    private static final int INT_LEAST16_MIN = (int) -32768L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST16_MIN -32768
     *}
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }

    private static final int INT_LEAST32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST32_MIN -2147483648
     *}
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }

    private static final long INT_LEAST64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }

    private static final byte INT_LEAST8_MAX = (byte) 127L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST8_MAX 127
     *}
     */
    public static byte INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }

    private static final short INT_LEAST16_MAX = (short) 32767L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST16_MAX 32767
     *}
     */
    public static short INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }

    private static final int INT_LEAST32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST32_MAX 2147483647
     *}
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }

    private static final long INT_LEAST64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define INT_LEAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }

    private static final byte UINT_LEAST8_MAX = (byte) 255L;

    /**
     * {@snippet lang = c:
     * #define UINT_LEAST8_MAX 255
     *}
     */
    public static byte UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }

    private static final short UINT_LEAST16_MAX = (short) 65535L;

    /**
     * {@snippet lang = c:
     * #define UINT_LEAST16_MAX 65535
     *}
     */
    public static short UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }

    private static final int UINT_LEAST32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c:
     * #define UINT_LEAST32_MAX 4294967295
     *}
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }

    private static final long UINT_LEAST64_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define UINT_LEAST64_MAX -1
     *}
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }

    private static final int INT_FAST8_MIN = (int) -128L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST8_MIN -128
     *}
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }

    private static final int INT_FAST16_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST16_MIN -2147483648
     *}
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }

    private static final int INT_FAST32_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST32_MIN -2147483648
     *}
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }

    private static final long INT_FAST64_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }

    private static final byte INT_FAST8_MAX = (byte) 127L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST8_MAX 127
     *}
     */
    public static byte INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }

    private static final int INT_FAST16_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST16_MAX 2147483647
     *}
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }

    private static final int INT_FAST32_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST32_MAX 2147483647
     *}
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }

    private static final long INT_FAST64_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define INT_FAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }

    private static final byte UINT_FAST8_MAX = (byte) 255L;

    /**
     * {@snippet lang = c:
     * #define UINT_FAST8_MAX 255
     *}
     */
    public static byte UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }

    private static final int UINT_FAST16_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c:
     * #define UINT_FAST16_MAX 4294967295
     *}
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }

    private static final int UINT_FAST32_MAX = (int) 4294967295L;

    /**
     * {@snippet lang = c:
     * #define UINT_FAST32_MAX 4294967295
     *}
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }

    private static final long UINT_FAST64_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define UINT_FAST64_MAX -1
     *}
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }

    private static final long INTPTR_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define INTPTR_MIN -9223372036854775808
     *}
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }

    private static final long INTPTR_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define INTPTR_MAX 9223372036854775807
     *}
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }

    private static final long UINTPTR_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define UINTPTR_MAX -1
     *}
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }

    private static final long INTMAX_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define INTMAX_MIN -9223372036854775808
     *}
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }

    private static final long INTMAX_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define INTMAX_MAX 9223372036854775807
     *}
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }

    private static final long UINTMAX_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define UINTMAX_MAX -1
     *}
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }

    private static final long PTRDIFF_MIN = -9223372036854775808L;

    /**
     * {@snippet lang = c:
     * #define PTRDIFF_MIN -9223372036854775808
     *}
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }

    private static final long PTRDIFF_MAX = 9223372036854775807L;

    /**
     * {@snippet lang = c:
     * #define PTRDIFF_MAX 9223372036854775807
     *}
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }

    private static final long SIZE_MAX = -1L;

    /**
     * {@snippet lang = c:
     * #define SIZE_MAX -1
     *}
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }

    private static final int SIG_ATOMIC_MIN = (int) -2147483648L;

    /**
     * {@snippet lang = c:
     * #define SIG_ATOMIC_MIN -2147483648
     *}
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }

    private static final int SIG_ATOMIC_MAX = (int) 2147483647L;

    /**
     * {@snippet lang = c:
     * #define SIG_ATOMIC_MAX 2147483647
     *}
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }

    /** Denoiser Effect */
    public static final MemorySegment NVAFX_EFFECT_DENOISER = LIBRARY_ARENA.allocateUtf8String("denoiser");
    /** Dereverb Effect */
    public static final MemorySegment NVAFX_EFFECT_DEREVERB = LIBRARY_ARENA.allocateUtf8String("dereverb");
    /** Dereverb Denoiser Effect */
    public static final MemorySegment NVAFX_EFFECT_DEREVERB_DENOISER = LIBRARY_ARENA.allocateUtf8String("dereverb_denoiser");
    /** Acoustic Echo Cancellation Effect */
    public static final MemorySegment NVAFX_EFFECT_AEC = LIBRARY_ARENA.allocateUtf8String("aec");
    /** Super-resolution Effect */
    public static final MemorySegment NVAFX_EFFECT_SUPERRES = LIBRARY_ARENA.allocateUtf8String("superres");

    /** Parameter selectors */
    public static final MemorySegment NVAFX_CHAINED_EFFECT_DENOISER_16k_SUPERRES_16k_TO_48k = LIBRARY_ARENA.allocateUtf8String("denoiser16k_superres16kto48k");
    public static final MemorySegment NVAFX_CHAINED_EFFECT_DEREVERB_16k_SUPERRES_16k_TO_48k = LIBRARY_ARENA.allocateUtf8String("dereverb16k_superres16kto48k");
    public static final MemorySegment NVAFX_CHAINED_EFFECT_DEREVERB_DENOISER_16k_SUPERRES_16k_TO_48k = LIBRARY_ARENA.allocateUtf8String("dereverb_denoiser16k_superres16kto48k");
    public static final MemorySegment NVAFX_CHAINED_EFFECT_SUPERRES_8k_TO_16k_DENOISER_16k = LIBRARY_ARENA.allocateUtf8String("superres8kto16k_denoiser16k");
    public static final MemorySegment NVAFX_CHAINED_EFFECT_SUPERRES_8k_TO_16k_DEREVERB_16k = LIBRARY_ARENA.allocateUtf8String("superres8kto16k_dereverb16k");
    public static final MemorySegment NVAFX_CHAINED_EFFECT_SUPERRES_8k_TO_16k_DEREVERB_DENOISER_16k = LIBRARY_ARENA.allocateUtf8String("superres8kto16k_dereverb_denoiser16k");


    /** Common Effect parameters.
     *  Number of audio streams in I/O (unsigned int). */
    public static final MemorySegment NVAFX_PARAM_NUM_STREAMS = LIBRARY_ARENA.allocateUtf8String("num_streams");
    /** To set if SDK should select the default GPU to run the effects in a Multi-GPU setup(unsigned int).
     * Default value is 0. Please see user manual for details.*/
    public static final MemorySegment NVAFX_PARAM_USE_DEFAULT_GPU = LIBRARY_ARENA.allocateUtf8String("use_default_gpu");
    /** To be set to '1' if SDK user wants to create and manage own CUDA context. Other users can simply
     * ignore this parameter. Once set to '1' this cannot be unset for that session (unsigned int) rw param
     * Note: NVAFX_PARAM_USE_DEFAULT_GPU and NVAFX_PARAM_USER_CUDA_CONTEXT cannot be used at the same time */
    public static final MemorySegment NVAFX_PARAM_USER_CUDA_CONTEXT = LIBRARY_ARENA.allocateUtf8String("user_cuda_context");
    /** To be set to '1' if SDK user wants to disable cuda graphs. Other users can simply ignore this parameter.
     * Using Cuda Graphs helps to reduce the inference between GPU and CPU which makes operations quicker.*/
    public static final MemorySegment NVAFX_PARAM_DISABLE_CUDA_GRAPH = LIBRARY_ARENA.allocateUtf8String("disable_cuda_graph");
    /** To be set to '1' if SDK user wants to enable VAD */
    public static final MemorySegment NVAFX_PARAM_ENABLE_VAD = LIBRARY_ARENA.allocateUtf8String("enable_vad");
    /** Effect parameters. @ref NvAFX_ParameterSelector
     * Model path (char*) */
    public static final MemorySegment NVAFX_PARAM_MODEL_PATH = LIBRARY_ARENA.allocateUtf8String("model_path");
    /** Input Sample rate (unsigned int). Currently supported sample rate(s): 48000, 16000, 8000 */
    public static final MemorySegment NVAFX_PARAM_INPUT_SAMPLE_RATE = LIBRARY_ARENA.allocateUtf8String("input_sample_rate");
    /** Output Sample rate (unsigned int). Currently supported sample rate(s): 48000, 16000 */
    public static final MemorySegment NVAFX_PARAM_OUTPUT_SAMPLE_RATE = LIBRARY_ARENA.allocateUtf8String("output_sample_rate");
    /** Number of input samples per frame (unsigned int). This is immutable parameter */
    public static final MemorySegment NVAFX_PARAM_NUM_INPUT_SAMPLES_PER_FRAME = LIBRARY_ARENA.allocateUtf8String("num_input_samples_per_frame");
    /** Number of output samples per frame (unsigned int). This is immutable parameter */
    public static final MemorySegment NVAFX_PARAM_NUM_OUTPUT_SAMPLES_PER_FRAME = LIBRARY_ARENA.allocateUtf8String("num_output_samples_per_frame");
    /** Number of input audio channels */
    public static final MemorySegment NVAFX_PARAM_NUM_INPUT_CHANNELS = LIBRARY_ARENA.allocateUtf8String("num_input_channels");
    /** Number of output audio channels */
    public static final MemorySegment NVAFX_PARAM_NUM_OUTPUT_CHANNELS = LIBRARY_ARENA.allocateUtf8String("num_output_channels");
    /** Effect intensity factor (float) */
    public static final MemorySegment NVAFX_PARAM_INTENSITY_RATIO = LIBRARY_ARENA.allocateUtf8String("intensity_ratio");

    public enum NvAFX_Status {
        NVAFX_STATUS_SUCCESS,
        NVAFX_STATUS_FAILED,
        NVAFX_STATUS_INVALID_HANDLE,
        NVAFX_STATUS_INVALID_PARAM,
        NVAFX_STATUS_IMMUTABLE_PARAM,
        NVAFX_STATUS_INSUFFICIENT_DATA,
        NVAFX_STATUS_EFFECT_NOT_AVAILABLE,
        NVAFX_STATUS_OUTPUT_BUFFER_TOO_SMALL,
        NVAFX_STATUS_MODEL_LOAD_FAILED,
        NVAFX_STATUS_32_SERVER_NOT_REGISTERED,
        NVAFX_STATUS_32_COM_ERROR,
        NVAFX_STATUS_GPU_UNSUPPORTED,
        NVAFX_STATUS_CUDA_CONTEXT_CREATION_FAILED,
    }
}

