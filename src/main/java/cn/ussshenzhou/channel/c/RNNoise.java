package cn.ussshenzhou.channel.c;
// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

@SuppressWarnings("preview")
public class RNNoise {

    RNNoise() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int RNNOISE_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RNNOISE_H 1
     * }
     */
    public static int RNNOISE_H() {
        return RNNOISE_H;
    }

    private static class rnnoise_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_INT    );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rnnoise_get_size()
     * }
     */
    public static FunctionDescriptor rnnoise_get_size$descriptor() {
        return rnnoise_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rnnoise_get_size()
     * }
     */
    public static MethodHandle rnnoise_get_size$handle() {
        return rnnoise_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rnnoise_get_size()
     * }
     */
    public static MemorySegment rnnoise_get_size$address() {
        return rnnoise_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rnnoise_get_size()
     * }
     */
    public static int rnnoise_get_size() {
        var mh$ = rnnoise_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_get_size");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_get_frame_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_INT    );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_get_frame_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rnnoise_get_frame_size()
     * }
     */
    public static FunctionDescriptor rnnoise_get_frame_size$descriptor() {
        return rnnoise_get_frame_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rnnoise_get_frame_size()
     * }
     */
    public static MethodHandle rnnoise_get_frame_size$handle() {
        return rnnoise_get_frame_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rnnoise_get_frame_size()
     * }
     */
    public static MemorySegment rnnoise_get_frame_size$address() {
        return rnnoise_get_frame_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rnnoise_get_frame_size()
     * }
     */
    public static int rnnoise_get_frame_size() {
        var mh$ = rnnoise_get_frame_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_get_frame_size");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_INT,
            RNNoise.C_POINTER,
            RNNoise.C_POINTER
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rnnoise_init(DenoiseState *st, RNNModel *model)
     * }
     */
    public static FunctionDescriptor rnnoise_init$descriptor() {
        return rnnoise_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rnnoise_init(DenoiseState *st, RNNModel *model)
     * }
     */
    public static MethodHandle rnnoise_init$handle() {
        return rnnoise_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rnnoise_init(DenoiseState *st, RNNModel *model)
     * }
     */
    public static MemorySegment rnnoise_init$address() {
        return rnnoise_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rnnoise_init(DenoiseState *st, RNNModel *model)
     * }
     */
    public static int rnnoise_init(MemorySegment st, MemorySegment model) {
        var mh$ = rnnoise_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_init", st, model);
            }
            return (int)mh$.invokeExact(st, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_POINTER,
            RNNoise.C_POINTER
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DenoiseState *rnnoise_create(RNNModel *model)
     * }
     */
    public static FunctionDescriptor rnnoise_create$descriptor() {
        return rnnoise_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DenoiseState *rnnoise_create(RNNModel *model)
     * }
     */
    public static MethodHandle rnnoise_create$handle() {
        return rnnoise_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DenoiseState *rnnoise_create(RNNModel *model)
     * }
     */
    public static MemorySegment rnnoise_create$address() {
        return rnnoise_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DenoiseState *rnnoise_create(RNNModel *model)
     * }
     */
    public static MemorySegment rnnoise_create(MemorySegment model) {
        var mh$ = rnnoise_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_create", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RNNoise.C_POINTER
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rnnoise_destroy(DenoiseState *st)
     * }
     */
    public static FunctionDescriptor rnnoise_destroy$descriptor() {
        return rnnoise_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rnnoise_destroy(DenoiseState *st)
     * }
     */
    public static MethodHandle rnnoise_destroy$handle() {
        return rnnoise_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rnnoise_destroy(DenoiseState *st)
     * }
     */
    public static MemorySegment rnnoise_destroy$address() {
        return rnnoise_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rnnoise_destroy(DenoiseState *st)
     * }
     */
    public static void rnnoise_destroy(MemorySegment st) {
        var mh$ = rnnoise_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_destroy", st);
            }
            mh$.invokeExact(st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_process_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_FLOAT,
            RNNoise.C_POINTER,
            RNNoise.C_POINTER,
            RNNoise.C_POINTER
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_process_frame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float rnnoise_process_frame(DenoiseState *st, float *out, const float *in)
     * }
     */
    public static FunctionDescriptor rnnoise_process_frame$descriptor() {
        return rnnoise_process_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float rnnoise_process_frame(DenoiseState *st, float *out, const float *in)
     * }
     */
    public static MethodHandle rnnoise_process_frame$handle() {
        return rnnoise_process_frame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float rnnoise_process_frame(DenoiseState *st, float *out, const float *in)
     * }
     */
    public static MemorySegment rnnoise_process_frame$address() {
        return rnnoise_process_frame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float rnnoise_process_frame(DenoiseState *st, float *out, const float *in)
     * }
     */
    public static float rnnoise_process_frame(MemorySegment st, MemorySegment out, MemorySegment in) {
        var mh$ = rnnoise_process_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_process_frame", st, out, in);
            }
            return (float)mh$.invokeExact(st, out, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_model_from_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            RNNoise.C_POINTER,
            RNNoise.C_POINTER,
            RNNoise.C_INT
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_model_from_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RNNModel *rnnoise_model_from_buffer(const void *ptr, int len)
     * }
     */
    public static FunctionDescriptor rnnoise_model_from_buffer$descriptor() {
        return rnnoise_model_from_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RNNModel *rnnoise_model_from_buffer(const void *ptr, int len)
     * }
     */
    public static MethodHandle rnnoise_model_from_buffer$handle() {
        return rnnoise_model_from_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RNNModel *rnnoise_model_from_buffer(const void *ptr, int len)
     * }
     */
    public static MemorySegment rnnoise_model_from_buffer$address() {
        return rnnoise_model_from_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RNNModel *rnnoise_model_from_buffer(const void *ptr, int len)
     * }
     */
    public static MemorySegment rnnoise_model_from_buffer(MemorySegment ptr, int len) {
        var mh$ = rnnoise_model_from_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_model_from_buffer", ptr, len);
            }
            return (MemorySegment)mh$.invokeExact(ptr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rnnoise_model_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            RNNoise.C_POINTER
        );

        public static final MemorySegment ADDR = RNNoise.findOrThrow("rnnoise_model_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rnnoise_model_free(RNNModel *model)
     * }
     */
    public static FunctionDescriptor rnnoise_model_free$descriptor() {
        return rnnoise_model_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rnnoise_model_free(RNNModel *model)
     * }
     */
    public static MethodHandle rnnoise_model_free$handle() {
        return rnnoise_model_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rnnoise_model_free(RNNModel *model)
     * }
     */
    public static MemorySegment rnnoise_model_free$address() {
        return rnnoise_model_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rnnoise_model_free(RNNModel *model)
     * }
     */
    public static void rnnoise_model_free(MemorySegment model) {
        var mh$ = rnnoise_model_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rnnoise_model_free", model);
            }
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

